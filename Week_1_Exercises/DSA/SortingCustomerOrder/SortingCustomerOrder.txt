Understanding Sorting Algorithms
Bubble Sort:

Description: Bubble Sort repeatedly steps through the list, compares adjacent elements, and swaps them if they are in the wrong order. This pass-through process is repeated until the list is sorted.
Time Complexity:
Best-case: O(n)
Average-case: O(n^2)
Worst-case: O(n^2)
Space Complexity: O(1) (in-place sorting)
Insertion Sort:

Description: Insertion Sort builds the sorted array one item at a time by repeatedly picking the next item and inserting it into the correct position among the previously sorted items.
Time Complexity:
Best-case: O(n)
Average-case: O(n^2)
Worst-case: O(n^2)
Space Complexity: O(1) (in-place sorting)
Quick Sort:

Description: Quick Sort is a divide-and-conquer algorithm that picks an element as a pivot and partitions the array around the pivot, recursively sorting the sub-arrays.
Time Complexity:
Best-case: O(n log n)
Average-case: O(n log n)
Worst-case: O(n^2) (rare, depends on pivot selection)
Space Complexity: O(log n) (due to recursion)
Merge Sort:

Description: Merge Sort is a divide-and-conquer algorithm that divides the array into halves, recursively sorts them, and then merges the sorted halves.
Time Complexity:
Best-case: O(n log n)
Average-case: O(n log n)
Worst-case: O(n log n)
Space Complexity: O(n) (additional space for merging)

Analysis
Time Complexity
Bubble Sort:
Best-case: O(n) - when the array is already sorted.
Average-case: O(n^2) - when the array is randomly ordered.
Worst-case: O(n^2) - when the array is sorted in reverse order.
Quick Sort:
Best-case: O(n log n) - when the pivot divides the array into two nearly equal parts.
Average-case: O(n log n) - averaged over all possible pivot choices.
Worst-case: O(n^2) - when the pivot always ends up being the smallest or largest element (rare, but can happen with poor pivot selection).